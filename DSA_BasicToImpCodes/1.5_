//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template in C++

class Solution{
    public:
    //Function to return the count of number of elements in union of two arrays.
    bool chec(int a[], int n, int ele){
        for(int i=0; i<n; i++){
            if(a[i]==ele)
                return false;
        }
        return true;
    }
    int doUnion(int a[], int n, int b[], int m)  {
        //code here
        /*
        int i, j;
        int count;
        if(n<m){
            count=m;
            
        }
        for(int i=0; i<m;i++){
            if(chec(a,n,b[i]))
                count++;
        }
        return count;
        */
        
        //The  complexity for the brute force is n^2 for the worst case , so now we'll change it into O(n)
        //So, By using sets, time complexity will be as per our requirement. 
        set <int>ssd;
        
        for(int i=0;i<n;i++)
            ssd.insert(a[i]);
        for(int i=0;i<m;i++)
            ssd.insert(b[i]);

        return ssd.size();
	//Can also use while loop
    }
};

//{ Driver Code Starts.

int main() {
	
	int t;
	cin >> t;
	
	while(t--){
	    
	    int n, m;
	    cin >> n >> m;
	    int a[n], b[m];
	   
	    for(int i = 0;i<n;i++)
	       cin >> a[i];
	       
	    for(int i = 0;i<m;i++)
	       cin >> b[i];
	    Solution ob;
	    cout << ob.doUnion(a, n, b, m) << endl;
	    
	}
	
	return 0;
}
// } Driver Code Ends
